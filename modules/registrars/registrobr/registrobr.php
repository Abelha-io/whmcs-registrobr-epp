<?php# Copyright (c) 2012, AllWorldIT and (c) 2013, NIC.br (R)# # This program is free software: you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation, either version 3 of the License, or# (at your option) any later version.# # This program is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the# GNU General Public License for more details.# # You should have received a copy of the GNU General Public License# along with this program.  If not, see <http://www.gnu.org/licenses/>.# This module is a fork from whmcs-coza-epp (http://devlabs.linuxassist.net/projects/whmcs-coza-epp)# whmcs-coza epp developed by Nigel Kukard (nkukard@lbsd.net)# Official Website for whmcs-registrobr-epp# https://github.com/registrobr/whmcs-registrobr-epp# More information on NIC.br(R) domain registration services, Registro.br(TM), can be found at http://registro.br# Information for registrars available at http://registro.br/provedor/epp    # NIC.br(R) is a not-for-profit organization dedicated to domain registrations and fostering of the Internet in Brazil. No WHMCS services of any kind are available from NIC.br(R).    # WHMCS hosting, theming, module development, payment gateway # integration, customizations and consulting all available from # http://allworldit.com# Configuration arrayfunction registrobr_getConfigArray() {	return array(		"Username" => array( "Type" => "text", "Size" => "4", "Description" => "Provider ID(numerical)" ),		"Password" => array( "Type" => "password", "Size" => "20", "Description" => "EPP Password" ),		"TestMode" => array( "Type" => "yesno" ),		"Certificate" => array( "Type" => "text", "Description" => "Path of certificate .pem" ),		"Passphrase" => array( "Type" => "password", "Size" => "20", "Description" => "Passphrase to the certificate file" ),		"CPF" => array( "Type" => "text", "Size" => "20", "Description" => "Custom field for Tax Payer ID  (single field or non-corporations)" ),		"CNPJ" => array( "Type" => "text", "Size" => "20", "Description" => "Custom field for Tax Payer ID  (corporations, leave blank if same as above)" ),   	     	"TechC" => array( "Type" => "text", "Size" => "20", "Description" => "Tech Contact for new registrations" ),        	"FriendlyName" => array("Type" => "System", "Value"=>"Registro.br"),            "Description" => array("Type" => "System", "Value"=>"http://registro.br/provedor/epp/"),	);	}    # Function to return current nameserversfunction registrobr_GetNameservers($params) {			# Create new EPP client	$client = _registrobr_Client();        if (PEAR::isError($client))     {        $errormsg='get nameservers: EPP connection error '.$client;        return array("error" => $errormsg);    }		    	$request = '    <epp xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:epp="urn:ietf:params:xml:ns:epp-1.0" xmlns:domain="urn:ietf:params:xml:ns:domain-1.0" xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">	<command>		<info>			<domain:info xsi:schemaLocation="urn:ietf:params:xml:ns:domain-1.0 domain-1.0.xsd">				<domain:name hosts="all">'.$params["sld"].".".$params["tld"].'</domain:name>			</domain:info>		</info>    <clTRID>'.mt_rand().mt_rand().'</clTRID>	</command>    </epp>    ';    $response = $client->request($request);    	# Check results	            	# Check results		if(!is_array($response)) {		# Parse XML		$doc = new DOMDocument();		$doc->preserveWhiteSpace = false;		$doc->loadXML($response);		$ns = $doc->getElementsByTagName('hostName');		# Extract nameservers		$i =0;		$values = array();		foreach ($ns as $nn) {			$i++;			$values["ns{$i}"] = $nn->nodeValue;		}      }	return $values;}  # Function to save set of nameserversfunction registrobr_SaveNameservers($params) {        # Grab variables	$tld = $params["tld"];	$sld = $params["sld"];	# Generate XML for nameservers	if ($nameserver1 = $params["ns1"]) { 		$add_hosts = '<domain:hostAttr>	<domain:hostName>'.$nameserver1.'</domain:hostName></domain:hostAttr>';	}	if ($nameserver2 = $params["ns2"]) { 		$add_hosts .= '<domain:hostAttr>	<domain:hostName>'.$nameserver2.'</domain:hostName></domain:hostAttr>';	}	if ($nameserver3 = $params["ns3"]) { 		$add_hosts .= '<domain:hostAttr>	<domain:hostName>'.$nameserver3.'</domain:hostName></domain:hostAttr>';	}	if ($nameserver4 = $params["ns4"]) { 		$add_hosts .= '<domain:hostAttr>	<domain:hostName>'.$nameserver4.'</domain:hostName></domain:hostAttr>';	}	if ($nameserver5 = $params["ns5"]) { 		$add_hosts .= '<domain:hostAttr>	<domain:hostName>'.$nameserver5.'</domain:hostName></domain:hostAttr>';	}		# Grab list of current nameservers	$client = _registrobr_Client();        if (PEAR::isError($client)) { return array("error" => 'set nameservers: EPP connection error '.$client); }	    	$request = '<epp xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:epp="urn:ietf:params:xml:ns:epp-1.0"		xmlns:domain="urn:ietf:params:xml:ns:domain-1.0" xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">	<command>		<info>			<domain:info xsi:schemaLocation="urn:ietf:params:xml:ns:domain-1.0 domain-1.0.xsd">				<domain:name hosts="all">'.$sld.'.'.$tld.'</domain:name>			</domain:info>		</info>	</command></epp>';    $response = $client->request($request);    	# Parse XML	$doc= new DOMDocument();	$doc->loadXML($response);    $coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');    $msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;    $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;        # Check if result is ok	if($coderes != '1000') {            $errormsg = "set nameservers: error getting nameservers code ".$coderes." msg '".$msg."'";            if (!empty($reason)) {                $errormsg = $errormsg." reason '".$reason."'";                } ;        		logModuleCall("registrobr",$errormsg,$request,$response);        return array ("error" => $errormsg);            }                # Generate list of nameservers to remove            $hostlist = $doc->getElementsByTagName('hostName');            foreach ($hostlist as $host) {                $rem_hosts .= '            <domain:hostAttr>            <domain:hostName>'.$host->nodeValue.'</domain:hostName>                </domain:hostAttr>                ';            }		# Build request		$request='                 <epp xmlns:epp="urn:ietf:params:xml:ns:epp-1.0" xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">                    <command>                        <update>                            <domain:update>                                <domain:name>'.$sld.'.'.$tld.'</domain:name>                                <domain:add>                                    <domain:ns>'.$add_hosts.' </domain:ns>                                </domain:add>								                                  <domain:rem>                                    <domain:ns>'.$rem_hosts.'</domain:ns>                                </domain:rem>                            </domain:update>                        </update>           <clTRID>'.mt_rand().mt_rand().'</clTRID>                    </command>                     </epp>                ';        # Make request        $response = $client->request($request);		# Parse XML result		$doc= new DOMDocument();		$doc->loadXML($response);		$coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');		$msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;        $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;        		if($coderes != '1000') {            $errormsg = "set nameservers: update servers error code ".$coderes." msg '".$msg."'";            if (!empty($reason)) {                $errormsg = $errormsg." reason '".$reason."'";                } ;                    $values["error"] = $errormsg ;             logModuleCall("registrobr",$errormsg,$request,$response);            } else { 			$values['status'] = "Domain update Pending. Based on .br policy, the estimated time taken is up to 30 minutes.";		}    return $values;    	}	        # Function to register domainfunction registrobr_RegisterDomain($params) {		# Setup include dir	$include_path = ROOTDIR . '/modules/registrars/registrobr';	set_include_path($include_path . PATH_SEPARATOR . get_include_path());	# Include CPF and CNPJ stuff we need	require_once 'isCnpjValid.php';	require_once 'isCpfValid.php';	# Grab module parameters	$moduleparams = getregistrarconfigoptions('registrobr');                	if (isCpfValid($params[$moduleparams['CPF']])==TRUE) { $RegistrantTaxID = $params[$moduleparams['CPF']] ; }    elseif (isCnpjValid($params[$moduleparams['CPF']])==TRUE) { $RegistrantTaxID = $params[$moduleparams['CPF']] ; }     elseif (isCnpjValid($params[$moduleparams['CNPJ']])==TRUE) { $RegistrantTaxID = $params[$moduleparams['CNPJ']] ; }    else {        $errormsg = ".br registrations require valid CPF or CNPJ";     	logModuleCall("registrobr","register",$params,$errormsg);        $values['error'] = $errormsg;		return $values;		}    $RegistrantTaxIDDigits = preg_replace("/[^0-9]/","",$RegistrantTaxID);                if (isCpfValid($RegistrantTaxIDDigits)==TRUE) {        $RegistrantTaxID = substr($RegistrantTaxIDDigits,0,3).".".substr($RegistrantTaxIDDigits,3,3).".".substr($RegistrantTaxIDDigits,6,3)."-".substr($RegistrantTaxIDDigits,9,2); }        else {            $RegistrantTaxID = substr($RegistrantTaxIDDigits,0,2).".".substr($RegistrantTaxIDDigits,2,3).".".substr($RegistrantTaxIDDigits,5,3)."/".substr($RegistrantTaxIDDigits,8,4)."-".substr($RegistrantTaxIDDigits,12,2);        }               # Grab variaibles        	$tld = $params["tld"];	$sld = $params["sld"];	$regperiod = $params["regperiod"];               # Get registrant details	    $RegistrantFirstName = $params["firstname"];    $RegistrantLastName = $params["lastname"];        $RegistrantContactName = $params["firstname"]." ".$params["lastname"];    if (isCpfValid($RegistrantTaxIDDigits)==TRUE) {        $RegistrantOrgName = substr($RegistrantContactName,0,40);    }    else {        if (!empty($params["companyname"])) { $RegistrantOrgName = substr($params["companyname"],0,50); }        else {            return array("error" => ".br registrations with CNPJ require Company Name to be filled in");        }            }        $parts=preg_split("/[0-9.]/",$params["address1"],NULL,PREG_SPLIT_NO_EMPTY);    $RegistrantAddress1=$parts[0];    $parts=preg_split("/[^0-9.]/",$params["address1"],NULL,PREG_SPLIT_NO_EMPTY);    $RegistrantAddress2=$parts[0];        $RegistrantAddress3 = $params["address2"];    $RegistrantCity = $params["city"];    $RegistrantStateProvince = $params["state"];    $RegistrantPostalCode = $params["postcode"];    $RegistrantCountry = $params["country"];    $RegistrantEmailAddress = $params["email"];    $RegistrantPhone = substr($params["fullphonenumber"],1);                     	                   $client = _registrobr_Client();        if (PEAR::isError($client)) {            $errormsg = 'register domain: EPP connection error '.$client;            logModuleCall("registrobr",$errormsg);            $values["error"] = $errormsg;            return $values;        }                     	$request = '    <epp xmlns="urn:ietf:params:xml:ns:epp-1.0"     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"     xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">     <command>    <info>    <contact:info xmlns:contact="urn:ietf:params:xml:ns:contact-1.0"     xsi:schemaLocation="urn:ietf:params:xml:ns:contact-1.0     contact-1.0.xsd">     <contact:id>'.$RegistrantTaxIDDigits.'</contact:id>    </contact:info>    </info>    <extension>    <brorg:info xmlns:brorg="urn:ietf:params:xml:ns:brorg-1.0"     xsi:schemaLocation="urn:ietf:params:xml:ns:brorg-1.0     brorg-1.0.xsd">     <brorg:organization>'.$RegistrantTaxID.'</brorg:organization>    </brorg:info>    </extension>       <clTRID>'.mt_rand().mt_rand().'</clTRID>    </command>    </epp>    ';          $response = $client->request($request);            # Parse XML result    $doc= new DOMDocument();    $doc->loadXML($response);    $coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');    if($coderes == '1000') {            $orgprov = ltrim($doc->getElementsByTagName('clID')->item(0)->nodeValue,"0");            if ($orgprov!=$moduleparams["Username"])                                { $errormsg="entity can only register domains through designated registrar.";                               logModuleCall("registrobr",$errormsg,$request,$response);                               $values["error"]=$errormsg;                               return $values;                               }     }                  elseif($coderes == '2303') {                                                 # Org contact creation                 $request='<epp xmlns="urn:ietf:params:xml:ns:epp-1.0"                         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"                         xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">                         <command>                        <create>                        <contact:create xmlns:contact="urn:ietf:params:xml:ns:contact-1.0"                         xsi:schemaLocation="urn:ietf:params:xml:ns:contact-1.0                         contact-1.0.xsd">                         <contact:id>dummy</contact:id>                        <contact:postalInfo type="loc">                            <contact:name>'.$RegistrantContactName.'</contact:name>                            <contact:addr>                                <contact:street>'.$RegistrantAddress1.'</contact:street>                                <contact:street>'.$RegistrantAddress2.'</contact:street>              <contact:street>'.$RegistrantAddress3.'</contact:street>                                <contact:city>'.$RegistrantCity.'</contact:city>                                <contact:sp>'.$RegistrantStateProvince.'</contact:sp>                                <contact:pc>'.$RegistrantPostalCode.'</contact:pc>                                <contact:cc>'.$RegistrantCountry.'</contact:cc>                            </contact:addr>                        </contact:postalInfo>                    <contact:voice>'.$RegistrantPhone.'</contact:voice>                    <contact:email>'.$RegistrantEmailAddress.'</contact:email>                    <contact:authInfo>                        <contact:pw/>                        </contact:authInfo>                    </contact:create>                </create>                <clTRID>'.mt_rand().mt_rand().'</clTRID>                </command>                </epp>';                                  $response = $client->request($request);                              # Parse XML result                 $doc= new DOMDocument();                 $doc->loadXML($response);                 $coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');                 $msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;                 $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;	                 if($coderes != '1000') {                        $errormsg = "register: organizational contact creation error  code ".$coderes." msg '".$msg."'";                        if (!empty($reason)) {                            $errormsg = $errormsg." reason '".$reason."'";                            }                    logModuleCall("registrobr",$errormsg,$request,$response);                    $values["error"]=$errormsg;                    return $values;                    }                                         # Org creation                          $request='<epp xmlns="urn:ietf:params:xml:ns:epp-1.0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">              <command>             <create>         <contact:create xmlns:contact="urn:ietf:params:xml:ns:contact-1.0"          xsi:schemaLocation="urn:ietf:params:xml:ns:contact-1.0              contact-1.0.xsd">          <contact:id>'.$RegistrantTaxIDDigits.'</contact:id>         <contact:postalInfo type="loc">         <contact:name>'.$RegistrantOrgName.'</contact:name>         <contact:addr>         <contact:street>'.$RegistrantAddress1.'</contact:street>         <contact:street>'.$RegistrantAddress2.'</contact:street>              <contact:street>'.$RegistrantAddress3.'</contact:street>         <contact:city>'.$RegistrantCity.'</contact:city>         <contact:sp>'.$RegistrantStateProvince.'</contact:sp>         <contact:pc>'.$RegistrantPostalCode.'</contact:pc>         <contact:cc>'.$RegistrantCountry.'</contact:cc>             </contact:addr>             </contact:postalInfo>         <contact:voice>'.$RegistrantPhone.'</contact:voice>         <contact:email>'.$RegistrantEmailAddress.'</contact:email>         <contact:authInfo>         <contact:pw/>             </contact:authInfo>             </contact:create>             </create>             <extension>         <brorg:create xmlns:brorg="urn:ietf:params:xml:ns:brorg-1.0"          xsi:schemaLocation="urn:ietf:params:xml:ns:brorg-1.0              brorg-1.0.xsd">          <brorg:organization>'.$RegistrantTaxID.'</brorg:organization>         <brorg:contact type="admin">'.$doc->getElementsByTagName('id')->item(0)->nodeValue.'</brorg:contact>             </brorg:create>             </extension>                <clTRID>'.mt_rand().mt_rand().'</clTRID>             </command>             </epp>';             $response = $client->request($request);                          # Parse XML result             $doc= new DOMDocument();             $doc->loadXML($response);             $coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');             $msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;             $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;                          if($coderes != '1001') {                 $errormsg = "register: organization creation error  code ".$coderes." msg '".$msg."'";                 if (!empty($reason)) {                     $errormsg = $errormsg." reason '".$reason."'";                 }                 logModuleCall("registrobr",$errormsg,$request,$response);                 $values["error"]=$errormsg;                 return $values;             }                            }       	                     	# Generate XML for namseverss	if ($nameserver1 = $params["ns1"]) { 		$add_hosts = '<domain:hostAttr>	<domain:hostName>'.$nameserver1.'</domain:hostName></domain:hostAttr>';	}	if ($nameserver2 = $params["ns2"]) { 		$add_hosts .= '<domain:hostAttr>	<domain:hostName>'.$nameserver2.'</domain:hostName></domain:hostAttr>';	}	if ($nameserver3 = $params["ns3"]) { 		$add_hosts .= '<domain:hostAttr>	<domain:hostName>'.$nameserver3.'</domain:hostName></domain:hostAttr>';	}	if ($nameserver4 = $params["ns4"]) { 		$add_hosts .= '<domain:hostAttr>	<domain:hostName>'.$nameserver4.'</domain:hostName></domain:hostAttr>';	}	if ($nameserver5 = $params["ns5"]) { 		$add_hosts .= '<domain:hostAttr>	<domain:hostName>'.$nameserver5.'</domain:hostName></domain:hostAttr>';	}          	# Carry on to domain registration                 $request = '                 <epp xmlns="urn:ietf:params:xml:ns:epp-1.0"                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"                  xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd"> 	<command>		<create>                 <domain:create xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"                  xsi:schemaLocation="urn:ietf:params:xml:ns:domain-1.0 domain-1.0.xsd">				<domain:name>'.$sld.'.'.$tld.'</domain:name>    <domain:period unit="y">'.$regperiod.'</domain:period>				<domain:ns>'.$add_hosts.'</domain:ns>';                 if (strlen($moduleparams['TechC'])>2) $request.=' <domain:contact type="tech">'.$moduleparams['TechC'].'</domain:contact>';                 $request.='                 <domain:authInfo>				<domain:pw/>			</domain:authInfo>		</domain:create>		</create>                 <extension>                 <brdomain:create xmlns:brdomain="urn:ietf:params:xml:ns:brdomain-1.0"                  xsi:schemaLocation="urn:ietf:params:xml:ns:brdomain-1.0                  brdomain-1.0.xsd">                  <brdomain:organization>'.$RegistrantTaxID.'</brdomain:organization>                 </brdomain:create>                 </extension>    <clTRID>'.mt_rand().mt_rand().'</clTRID>	</command></epp>';        $response = $client->request($request);   		$doc= new DOMDocument();    $doc->loadXML($response);   		$coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');		$msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;        $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;                                                            if(($coderes != '1001')&&($coderes != '1000')) {                                $errormsg = "register: domain creation error code ".$coderes." msg '".$msg."'";                                if (!empty($reason)) {                                         $errormsg = $errormsg." reason '".$reason."'";                                         }                                logModuleCall("registrobr",$errormsg,$request,$response);                                $values["error"]=$errormsg;                                } else {                                         $values["status"] = $msg;		}						return $values;}                                                                          # Function to renew domainfunction registrobr_RenewDomain($params) {	# Grab variables	$tld = $params["tld"];	$sld = $params["sld"];	$regperiod = $params["regperiod"];    	$client = _registrobr_Client();    if (PEAR::isError($client)) {        $errormsg = 'renew domain: EPP connection error '.$client;        logModuleCall("registrobr",$errormsg);        $values["error"] = $errormsg;		return $values;	}    	$request='<epp xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:epp="urn:ietf:params:xml:ns:epp-1.0" 		xmlns:domain="urn:ietf:params:xml:ns:domain-1.0" xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">	<command>		<info>			<domain:info xsi:schemaLocation="urn:ietf:params:xml:ns:domain-1.0 domain-1.0.xsd">				<domain:name hosts="all">'.$sld.'.'.$tld.'</domain:name>			</domain:info>		</info>    <clTRID>'.mt_rand().mt_rand().'</clTRID>	</command></epp>';    $response = $client->request($request);                                      	# Parse XML result	$doc= new DOMDocument();	$doc->loadXML($response);	$coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');    $msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;    $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;                 	if($coderes != '1000') {                 $errormsg = "renew: domain info error code ".$coderes." msg '".$msg."'";                 if (!empty($reason)) {                 $errormsg = $errormsg." reason '".$reason."'";                 }                 logModuleCall("registrobr",$errormsg,$request,$response);                 $values["error"]=$errormsg;                 }                 		else { 		# Sanitize expiry date		$expdate = substr($doc->getElementsByTagName('exDate')->item(0)->nodeValue,0,10);		# Send request to renew		$request='<epp xmlns:epp="urn:ietf:params:xml:ns:epp-1.0" xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">	<command>		<renew>			<domain:renew>				<domain:name>'.$sld.'.'.$tld.'</domain:name>				<domain:curExpDate>'.$expdate.'</domain:curExpDate>            <domain:period unit="y">'.$regperiod.'</domain:period>			</domain:renew>		</renew>            <clTRID>'.mt_rand().mt_rand().'</clTRID>	</command></epp>';                                                $response = $client->request($request);                                                    		# Parse XML result			$doc= new DOMDocument();		$doc->loadXML($response);		$coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');        $msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;        $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;                 		if($coderes != '1000') {		         $errormsg = "renew: domain renew error code ".$coderes." msg '".$msg."'";                 if (!empty($reason)) {                 $errormsg = $errormsg." reason '".$reason."'";                 }                 logModuleCall("registrobr",$errormsg,$request,$response);                 $values["error"]=$errormsg;                 }                 else {			$values["status"] = $msg;		}	}	# If error, return the error message in the value below	return $values;}# Function to grab contact detailsfunction registrobr_GetContactDetails($params) {    # Setup include dir	$include_path = ROOTDIR . '/modules/registrars/registrobr';	set_include_path($include_path . PATH_SEPARATOR . get_include_path());	# Include CPF and CNPJ stuff we need	require_once 'isCnpjValid.php';	require_once 'isCpfValid.php';    	# Grab variables		$tld = $params["tld"];	$sld = $params["sld"];	# Grab contact details	$client = _registrobr_Client();    if (PEAR::isError($client)) {        $errormsg = 'get contact details: EPP connection error '.$client;        logModuleCall("registrobr",$errormsg);        $values["error"] = $errormsg;		return $values;	}    	$request = '<epp xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:epp="urn:ietf:params:xml:ns:epp-1.0"		xmlns:domain="urn:ietf:params:xml:ns:domain-1.0" xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">	<command>		<info>			<domain:info xsi:schemaLocation="urn:ietf:params:xml:ns:domain-1.0 domain-1.0.xsd">				<domain:name hosts="all">'.$sld.'.'.$tld.'</domain:name>			</domain:info>		</info>	</command></epp>';    $response = $client->request($request);                                                              	# Parse XML result			$doc= new DOMDocument();	$doc->loadXML($response);	$coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');	$msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;    $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;        if($coderes != '1000') {        $errormsg = "get contact details: domain info error code ".$coderes." msg '".$msg."'";        if (!empty($reason)) $errormsg.=" reason '".$reason."'";        logModuleCall("registrobr",$errormsg,$request,$response);        return array("error" => $errormsg);        }                        # Grab module parameters        $moduleparams = getregistrarconfigoptions('registrobr');                # Verify provider                $prov = ltrim($doc->getElementsByTagName('clID')->item(0)->nodeValue,"0");               if ($prov!=$moduleparams["Username"])        { $errormsg="get contact details: domain is not designated to this registrar.";            logModuleCall("registrobr",$errormsg,$request,$response);            $values["error"]=$errormsg;            return $values;        }                       # Grab Admin, Tech ID        $Contacts["Admin"]=$doc->getElementsByTagName('contact')->item(0)->nodeValue;        $Contacts["Tech"]=$doc->getElementsByTagName('contact')->item(1)->nodeValue;                                                                                                                                                                                                         # Get TaxPayer ID for obtaining Reg Info                        $RegistrantTaxID=$doc->getElementsByTagName('organization')->item(0)->nodeValue;                # Returned CNPJ has extra zero at left        if(isCpfValid($RegistrantTaxID)!=TRUE) { $RegistrantTaxID=substr($RegistrantTaxID,1); };                $RegistrantTaxIDDigits = preg_replace("/[^0-9]/","",$RegistrantTaxID);                                             		# Grab reg info                                $request = '                <epp xmlns="urn:ietf:params:xml:ns:epp-1.0"                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"                xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">                <command>                <info>                <contact:info xmlns:contact="urn:ietf:params:xml:ns:contact-1.0"                xsi:schemaLocation="urn:ietf:params:xml:ns:contact-1.0                contact-1.0.xsd">                <contact:id>'.$RegistrantTaxIDDigits.'</contact:id>                </contact:info>                </info>                <extension>                <brorg:info xmlns:brorg="urn:ietf:params:xml:ns:brorg-1.0"                xsi:schemaLocation="urn:ietf:params:xml:ns:brorg-1.0                brorg-1.0.xsd">                <brorg:organization>'.$RegistrantTaxID.'</brorg:organization>                </brorg:info>                </extension>                <clTRID>'.mt_rand().mt_rand().'</clTRID>                </command>                </epp>                ';		         $response = $client->request($request);         		# Parse XML result		$doc= new DOMDocument();		$doc->loadXML($response);                                $coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');                $msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;                $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;                                if($coderes != '1000') {                $errormsg = "get contact details: organization info error code ".$coderes." msg '".$msg."'";                if (!empty($reason)) {                $errormsg = $errormsg." reason '".$reason."'";                }                logModuleCall("registrobr",$errormsg,$request,$response);                $values["error"]=$errormsg;                return $values;                }                					            $Contacts["Registrant"]=$doc->getElementsByTagName('contact')->item(0)->nodeValue;                    if (isCnpjValid($RegistrantTaxIDDigits)==TRUE) { $values["Registrant"]["Razao Social"] = $doc->getElementsByTagName('name')->item(0)->nodeValue; }    else { $values["Registrant"]["Nome e Sobrenome"] = $doc->getElementsByTagName('name')->item(0)->nodeValue; }                                                                                  #Get Org, Adm and Tech Contacts                foreach ($Contacts as $type => $value) {                                       $request = '<epp xmlns="urn:ietf:params:xml:ns:epp-1.0"                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"                    xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">                            <command>                                <info>                                    <contact:info xmlns:contact="urn:ietf:params:xml:ns:contact-1.0"                                    xsi:schemaLocation="urn:ietf:params:xml:ns:contact-1.0                                    contact-1.0.xsd">                                        <contact:id>'.$value.'</contact:id>                                    </contact:info>                                </info>                                <clTRID>'.mt_rand().mt_rand().'</clTRID>                            </command>                    </epp>';                                $response = $client->request($request);                                # Parse XML result                $doc= new DOMDocument();                $doc->loadXML($response);                                $coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');                $msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;                $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;                                if($coderes != '1000') {                    $errormsg = "get contact details: ".$type. "contact info error code ".$coderes." msg '".$msg."'";                    if (!empty($reason)) $errormsg.=" reason '".$reason."'";                    logModuleCall("registrobr",$errormsg,$request,$response);                    return array("error" => $errormsg);                }                                                                                                                $values[$type]["Nome e Sobrenome"] = $doc->getElementsByTagName('name')->item(0)->nodeValue;                        $values[$type]["Logradouro"] = $doc->getElementsByTagName('street')->item(0)->nodeValue;                        $values[$type]["Numero"] = $doc->getElementsByTagName('street')->item(1)->nodeValue;                        $values[$type]["Complemento"] = $doc->getElementsByTagName('street')->item(2)->nodeValue;                        $values[$type]["Cidade"] = $doc->getElementsByTagName('city')->item(0)->nodeValue;                        $values[$type]["Estado"] = $doc->getElementsByTagName('sp')->item(0)->nodeValue;                        $values[$type]["CEP"] = $doc->getElementsByTagName('pc')->item(0)->nodeValue;                        $values[$type]["Pais"] = $doc->getElementsByTagName('cc')->item(0)->nodeValue;                        $values[$type]["Fone"] = $doc->getElementsByTagName('voice')->item(0)->nodeValue;                        $values[$type]["Email"] = $doc->getElementsByTagName('email')->item(0)->nodeValue;                                                            }            	            return $values;}                                       # Function to save contact detailsfunction registrobr_SaveContactDetails($params) {    # If nothing was changed, return    if ($params["contactdetails"]==$params["original"]) return array("status" => "nothing to change");        # Setup include dir	$include_path = ROOTDIR . '/modules/registrars/registrobr';	set_include_path($include_path . PATH_SEPARATOR . get_include_path());	    # Include CPF and CNPJ stuff we need	require_once 'isCnpjValid.php';	require_once 'isCpfValid.php';    	# Grab variables		$tld = $params["tld"];	$sld = $params["sld"];    	# Grab domain, organization and contact details	$client = _registrobr_Client();    if (PEAR::isError($client)) {        $errormsg = 'set contact details: EPP connection error '.$client;        logModuleCall("registrobr",$errormsg);        return array("error" => $errormsg);	}            $request = '    <epp xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:epp="urn:ietf:params:xml:ns:epp-1.0"xmlns:domain="urn:ietf:params:xml:ns:domain-1.0" xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">	<command>    <info><domain:info xsi:schemaLocation="urn:ietf:params:xml:ns:domain-1.0 domain-1.0.xsd"><domain:name hosts="all">'.$sld.'.'.$tld.'</domain:name>    </domain:info>    </info>	</command>    </epp>    ';        $response = $client->request($request);    	# Parse XML result			$doc= new DOMDocument();	$doc->loadXML($response);	$coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');	$msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;        if($coderes != '1000') {        $errormsg = "set contact details: domain info error code ".$coderes." msg '".$msg."'";        if (!empty($reason)) {            $errormsg = $errormsg." reason '".$reason."'";        }        logModuleCall("registrobr",$errormsg,$request,$response);        return array("error" => $errormsg);    }                # Grab module parameters    $moduleparams = getregistrarconfigoptions('registrobr');        # Verify provider        $prov = ltrim($doc->getElementsByTagName('clID')->item(0)->nodeValue,"0");        if ($prov!=$moduleparams["Username"])    { $errormsg="set contact details: domain is not designated to this registrar.";        logModuleCall("registrobr",$errormsg,$request,$response);        return array("error" => $errormsg);            }                # Grab Admin, Billing, Tech ID    # bug: need to access type to determine type    $Contacts["Admin"]=$doc->getElementsByTagName('contact')->item(0)->nodeValue;    $Contacts["Billing"]=$doc->getElementsByTagName('contact')->item(1)->nodeValue;        $Contacts["Tech"]=$doc->getElementsByTagName('contact')->item(2)->nodeValue;        $NewContacts=$Contacts;                    # Get TaxPayer ID for obtaining Reg Info        $RegistrantTaxID=$doc->getElementsByTagName('organization')->item(0)->nodeValue;    # Returned CNPJ has extra zero at left    if(isCpfValid($RegistrantTaxID)!=TRUE) { $RegistrantTaxID=substr($RegistrantTaxID,1); };        $RegistrantTaxIDDigits = preg_replace("/[^0-9]/","",$RegistrantTaxID);        # This flag will signal the need for doing a domain update or not    $DomainUpdate = FALSE ;     # This flag will signal the need for doing a brorg update or not    $OrgUpdate = FALSE ;            $ContactTypes = array ("Registrant","Admin","Tech");            foreach ($ContactTypes as $type)  {        if ($params["contactdetails"][$type]!=$params["original"][$type]) {                                    # Start by creating a new contact with the updated information                                    $request='<epp xmlns="urn:ietf:params:xml:ns:epp-1.0"                     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"                     xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">                         <command>                        <create>                    <contact:create xmlns:contact="urn:ietf:params:xml:ns:contact-1.0"                     xsi:schemaLocation="urn:ietf:params:xml:ns:contact-1.0                         contact-1.0.xsd">                     <contact:id>dummy</contact:id>                    <contact:postalInfo type="loc">                    <contact:name>'.(empty($params["contactdetails"][$type]["Nome e Sobrenome"]) ? $params["contactdetails"][$type]["Full Name"] : $params["contactdetails"][$type]["Nome e Sobrenome"]).'</contact:name>                    <contact:addr>                    <contact:street>';                        if (empty($params["contactdetails"][$type]["Logradouro"])) {                            $parts=preg_split("/[0-9.]/",$params["contactdetails"][$type]["Address 1"],NULL,PREG_SPLIT_NO_EMPTY);                            $request.=$parts.'</contact:street>                        <contact:street>';                            $parts=preg_split("/[^0-9.]/",$params["contactdetails"][$type]["Address 1"],NULL,PREG_SPLIT_NO_EMPTY);                                                                                   $request.=$parts.'</contact:street>                        <contact:street>'.$params["contactdetails"][$type]["Address 2"];                        }                        else $request.=$params["contactdetails"][$type]["Logradouro"].'</contact:street>                        <contact:street>'.$params["contactdetails"][$type]["Numero"].'</contact:street>                        <contact:street>'.$params["contactdetails"][$type]["Complemento"];                                                                            $request.='</contact:street>                                                <contact:city>'.(empty($params["contactdetails"][$type]["Cidade"]) ? $params["contactdetails"][$type]["City"] : $params["contactdetails"][$type]["Cidade"]).'</contact:city>                    <contact:sp>'.(empty($params["contactdetails"][$type]["Estado"]) ? $params["contactdetails"][$type]["State"] : $params["contactdetails"][$type]["Estado"]).'</contact:sp>                    <contact:pc>'.(empty($params["contactdetails"][$type]["CEP"]) ? $params["contactdetails"][$type]["Postcode"] : $params["contactdetails"][$type]["CEP"]).'</contact:pc>                    <contact:cc>'.(empty($params["contactdetails"][$type]["Pais"]) ? $params["contactdetails"][$type]["Country"] : $params["contactdetails"][$type]["Pais"]).'</contact:cc>                        </contact:addr>                        </contact:postalInfo>                    <contact:voice>'.substr((empty($params["contactdetails"][$type]["Fone"]) ? $params["contactdetails"][$type]["Phone Number"] : $params["contactdetails"][$type]["Fone"]),1).'</contact:voice>                    <contact:email>'.$params["contactdetails"][$type]["Email"].'</contact:email>                    <contact:authInfo>                    <contact:pw/>                        </contact:authInfo>                        </contact:create>                        </create>                        <clTRID>'.mt_rand().mt_rand().'</clTRID>                        </command>                        </epp>';                                                $response = $client->request($request);                                                # Parse XML result                        $doc= new DOMDocument();                        $doc->loadXML($response);                        $coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');                        $msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;                        $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;                                                if($coderes != '1000') {                            $errormsg = "set contact: ".$type." contact creation error  code ".$coderes." msg '".$msg."'";                            if (!empty($reason)) {                                $errormsg = $errormsg." reason '".$reason."'";                            }                            logModuleCall("registrobr",$errormsg,$request,$response);                           return array ("error" => $errormsg);                        }                                      $NewContacts[$type]=$doc->getElementsByTagName('id')->item(0)->nodeValue;                        if ($type!="Registrant") { $DomainUpdate=TRUE; }                else { $OrgUpdate=TRUE;                    $OrgContactXML=$request;                                                                                }           }    }        if ($DomainUpdate==TRUE) {                        $NewContacts["Billing"]=$NewContacts["Admin"];                        $request='            <epp xmlns="urn:ietf:params:xml:ns:epp-1.0"             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"             xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">             <command>            <update>            <domain:update xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"             xsi:schemaLocation="urn:ietf:params:xml:ns:domain-1.0             domain-1.0.xsd">             <domain:name>'.$params["sld"].".".$params["tld"].'</domain:name>            <domain:add>';                                    foreach ($NewContacts as $type => $id) if ($type!="Registrant") $request.='<domain:contact type="'.strtolower($type).'">'.$id.'</domain:contact>' ;                        $request.='</domain:add>                    <domain:rem>';                        foreach ($Contacts as $type => $id) if ($type!="Registrant") $request.='<domain:contact type="'.strtolower($type).'">'.$id.'</domain:contact>' ;                        $request.='            </domain:rem>            </domain:update>            </update>            <clTRID>'.mt_rand().mt_rand().'</clTRID>            </command>            </epp>';                        $response = $client->request($request);                                    $doc= new DOMDocument();            $doc->loadXML($response);                                    $coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');            $msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;            $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;                                                                                                                      if($coderes != '1000') {                            $errormsg = "set contact: domain update error code ".$coderes." msg '".$msg."'";                            if (!empty($reason)) {                                $errormsg = $errormsg." reason '".$reason."'";                            }                            logModuleCall("registrobr",$errormsg,$request,$response);                            $values["error"]=$errormsg;                            return $values;                        }         }                # Has registrant information changed ?                if ($OrgUpdate==TRUE) {                                                                  # Grab reg info                        $request = '            <epp xmlns="urn:ietf:params:xml:ns:epp-1.0"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">            <command>            <info>        <contact:info xmlns:contact="urn:ietf:params:xml:ns:contact-1.0"        xsi:schemaLocation="urn:ietf:params:xml:ns:contact-1.0            contact-1.0.xsd">        <contact:id>'.$RegistrantTaxIDDigits.'</contact:id>            </contact:info>            </info>            <extension>        <brorg:info xmlns:brorg="urn:ietf:params:xml:ns:brorg-1.0"        xsi:schemaLocation="urn:ietf:params:xml:ns:brorg-1.0            brorg-1.0.xsd">        <brorg:organization>'.$RegistrantTaxID.'</brorg:organization>            </brorg:info>            </extension>            <clTRID>'.mt_rand().mt_rand().'</clTRID>            </command>            </epp>            ';                        $response = $client->request($request);                        # Parse XML result            $doc= new DOMDocument();            $doc->loadXML($response);                        $coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');            $msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;            $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;                        if($coderes != '1000') {                $errormsg = "set contact details: organization info error code ".$coderes." msg '".$msg."'";                if (!empty($reason)) {                    $errormsg.= " reason '".$reason."'";                }                logModuleCall("registrobr",$errormsg,$request,$response);                $values["error"]=$errormsg;                return $values;            }            # Get current org contact                        $Contacts["Registrant"]=$doc->getElementsByTagName('contact')->item(0)->nodeValue;                        # Org update                        # Parse XML org contact request                         $doc= new DOMDocument();            $doc->loadXML($OrgContactXML);                                    $request='<epp xmlns="urn:ietf:params:xml:ns:epp-1.0"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd">             <command>            <update>        <contact:update xmlns:contact="urn:ietf:params:xml:ns:contact-1.0"         xsi:schemaLocation="urn:ietf:params:xml:ns:contact-1.0             contact-1.0.xsd">         <contact:id>'.$RegistrantTaxIDDigits.'</contact:id>        <contact:chg>                <contact:postalInfo type="loc">        <contact:name>';                        if (isCpfValid($RegistrantTaxIDDigits)==TRUE) { $request.=$doc->getElementsByTagName('name')->item(0)->nodeValue; } else            {                $request.=( empty($params["contactdetails"]["Registrant"]["Razao Social"]) ? $params["contactdetails"]["Registrant"]["Company Name"] : $params["contactdetails"]["Registrant"]["Razao Social"]);            }                    $request.='            </contact:name>        <contact:addr>        <contact:street>'.$doc->getElementsByTagName('street')->item(0)->nodeValue.'</contact:street>        <contact:street>'.$doc->getElementsByTagName('street')->item(1)->nodeValue.'</contact:street>        <contact:street>'.$doc->getElementsByTagName('street')->item(2)->nodeValue.'</contact:street>        <contact:city>'.$doc->getElementsByTagName('city')->item(0)->nodeValue.'</contact:city>        <contact:sp>'.$doc->getElementsByTagName('sp')->item(0)->nodeValue.'</contact:sp>        <contact:pc>'.$doc->getElementsByTagName('pc')->item(0)->nodeValue.'</contact:pc>        <contact:cc>'.$doc->getElementsByTagName('cc')->item(0)->nodeValue.'</contact:cc>            </contact:addr>            </contact:postalInfo>        <contact:voice>'.$doc->getElementsByTagName('voice')->item(0)->nodeValue.'</contact:voice>        <contact:email>'.$doc->getElementsByTagName('email')->item(0)->nodeValue.'</contact:email>            </contact:chg>            </contact:update>            </update>            <extension>        <brorg:update xmlns:brorg="urn:ietf:params:xml:ns:brorg-1.0"         xsi:schemaLocation="urn:ietf:params:xml:ns:brorg-1.0             brorg-1.0.xsd">         <brorg:organization>'.$RegistrantTaxID.'</brorg:organization>        <brorg:add>        <brorg:contact type="admin">'.$NewContacts["Registrant"].'</brorg:contact>            </brorg:add>        <brorg:rem>        <brorg:contact type="admin">'.$Contacts["Registrant"].'</brorg:contact>            </brorg:rem>        <brorg:chg>';            if (isCnpjValid($RegistrantTaxIDDigits)) $request.='<brorg:responsible>'.$doc->getElementsByTagName('name')->item(0)->nodeValue.'</brorg:responsible>';            $request.='            </brorg:chg>            </brorg:update>            </extension>            <clTRID>'.mt_rand().mt_rand().'</clTRID>            </command>            </epp>';                        $response = $client->request($request);                        # Parse XML result            $doc= new DOMDocument();            $doc->loadXML($response);            $coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');            $msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;            $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;                        if($coderes != '1000') {                $errormsg = "set contact: organization update error code ".$coderes." msg '".$msg."'";                if (!empty($reason)) {                    $errormsg = $errormsg." reason '".$reason."'";                }                logModuleCall("registrobr",$errormsg,$request,$response);                return array ('error' => $errormsg);                                }                   }    return array();}                                                                       	                                        # Domain Delete (used in .br only for Add Grace Period)function registrobr_RequestDelete($params) {                                    $client = _registrobr_Client();if (PEAR::isError($client)) {                                    $errormsg = 'domain delete: EPP connection error '.$client;                                    logModuleCall("registrobr",$errormsg);                                    return array ('error' => $errormsg);                                        }$request = '<epp xmlns="urn:ietf:params:xml:ns:epp-1.0"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd"> <command><delete><domain:delete xmlns:domain="urn:ietf:params:xml:ns:domain-1.0" xsi:schemaLocation="urn:ietf:params:xml:ns:domain-1.0 domain-1.0.xsd"> <domain:name>'.$params['sld'].'.'.$params['tld'].'</domain:name></domain:delete></delete>                                    <clTRID>'.mt_rand().mt_rand().'</clTRID></command></epp>';$response = $client->request($request);# Parse XML$doc= new DOMDocument();$doc->loadXML($response);$coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');$msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;$reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;if($coderes != '1000') {    $errormsg = "domain delete: error code ".$coderes." msg '".$msg."'";    if (!empty($reason)) {        $errormsg.=" reason '".$reason."'";    } ;    logModuleCall("registrobr",$errormsg,$request,$response);    return array ('error' => $errormsg); }return array() ;}                                                                            # Function to create internal .br EPP requestfunction _registrobr_Client() {	# Setup include dir	$include_path = ROOTDIR . '/modules/registrars/registrobr';	set_include_path($include_path . PATH_SEPARATOR . get_include_path());	# Include EPP stuff we need	require_once 'Net/EPP/Client.php';	require_once 'Net/EPP/Protocol.php';	# Grab module parameters	$moduleparams = getregistrarconfigoptions('registrobr');	if (!isset($moduleparams['TestMode']) && !isset($moduleparams['Certificate'])) {		$errormsg =  "Please specifity path to certificate file"  ;		logModuleCall ("registrobr","config options err",$moduleparams,$errormsg);		return $errormsg ;		}	if (!isset($moduleparams['TestMode']) && !file_exists($moduleparams['Certificate'])) {		$errormsg =  "Invalid certificate file path"  ;		logModuleCall ("registrobr","config options err",$moduleparams,$errormsg);		return $errormsg ;		}	if (!isset($moduleparams['TestMode']) && !isset($moduleparams['Passphrase'])) {		$errormsg =   "Please specifity certificate passphrase"  ;		logModuleCall ("registrobr","config options err",$moduleparams,$errormsg);		return $errormsg ;		} 	# Use OT&E if test mode is set 	if (!isset($moduleparams['TestMode'])) {	          $Server = 'epp.registro.br' ;		  $Options = array (			'ssl' => array (				'passphrase' => $moduleparams['Passphrase'],				'local_cert' => $moduleparams['Certificate']));		} else {		$Server = 'beta.registro.br' ;		  $Options = array (			'ssl' => array (				'local_cert' =>  dirname(__FILE__) . '/test-client.pem' ));                  }	# Create SSL context	$context = stream_context_create ($Options) ;  	# Create EPP client	$client = new Net_EPP_Client();	# Connect	$Port = 700;	$use_ssl = true;	$res = $client->connect($Server, $Port, 3 , $use_ssl, $context);	# Check for error	if (PEAR::isError($res)) {		logModuleCall("registrobr","epp connect error","tls://".$Server.":".$Port,$res);		return $res;	}	# Perform login	$request='<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">	<command>		<login>			<clID>'.$moduleparams['Username'].'</clID>			<pw>'.$moduleparams['Password'].'</pw>			<options>			<version>1.0</version>			<lang>en</lang>			</options>			<svcs>				<objURI>urn:ietf:params:xml:ns:domain-1.0</objURI>				<objURI>urn:ietf:params:xml:ns:contact-1.0</objURI> 				   <svcExtension>     					<extURI>urn:ietf:params:xml:ns:brdomain-1.0</extURI>     					<extURI>urn:ietf:params:xml:ns:brorg-1.0</extURI>     					<extURI>urn:ietf:params:xml:ns:secDNS-1.0</extURI>     					<extURI>urn:ietf:params:xml:ns:secDNS-1.1</extURI>    				</svcExtension>			</svcs>		</login>                               <clTRID>'.mt_rand().mt_rand().'</clTRID>	</command></epp>';     $response = $client->request($request);   $doc= new DOMDocument();   $doc->loadXML($response);   $coderes = $doc->getElementsByTagName('result')->item(0)->getAttribute('code');   $msg = $doc->getElementsByTagName('msg')->item(0)->nodeValue;   $reason = $doc->getElementsByTagName('reason')->item(0)->nodeValue;      if($coderes != '1000') {                                    $errormsg = "epp login error code ".$coderes." msg '".$msg."'";                                    if (!empty($reason)) {                                        $errormsg = $errormsg." reason '".$reason."'";                                    }                                    logModuleCall("registrobr",$errormsg,$request,$response);                                         }   	return $client;                               }                               ?>